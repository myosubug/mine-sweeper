{"version":3,"sources":["components/Cell.js","components/Row.js","components/Board.js","components/Navbar.js","App.js","index.js"],"names":["Cell","props","data","isOpen","mineCount","className","onClick","open","onContextMenu","e","preventDefault","flag","hasMine","role","aria-label","hasFlag","ended","Row","cells","map","index","key","Board","initialize","board","i","row","push","j","col","x","y","cell","status","rows","state","current","initial","m","mine","rx","Math","floor","random","ry","cellClick","countMines","setState","checkAround","opened","endGame","length","count","updateFlag","newProps","this","mode","React","Component","Navbar","easy","hard","flagCount","start","end","duration","App","Object","assign","easyMode","hardMode","checkWin","alert","handleCellClick","prev","newFlag","prevProps","prevState","ReactDOM","render","document","getElementById"],"mappings":"+MAmFeA,G,MAjFF,SAAAC,GA8ET,OA5EQA,EAAMC,KAAKC,OACkB,IAAzBF,EAAMC,KAAKE,UAEP,yBACIC,UAAU,YACVC,QAAS,kBAAML,EAAMM,KAAKN,EAAMC,OAChCM,cAAe,SAAAC,GACXA,EAAEC,iBACFT,EAAMU,KAAKV,EAAMC,SAItBD,EAAMC,KAAKU,QAEd,yBAAKP,UAAU,YAAYC,QAAS,kBAAML,EAAMM,KAAKN,EAAMC,OACvDM,cAAe,SAAAC,GACXA,EAAEC,mBAEV,0BAAMG,KAAK,MAAMC,aAAW,QAA5B,iBAIA,yBACIT,UAAU,YACVC,QAAS,kBAAML,EAAMM,KAAKN,EAAMC,OAChCM,cAAe,SAAAC,GACXA,EAAEC,iBACFT,EAAMU,KAAKV,EAAMC,QAExBD,EAAMC,KAAKE,WAMfH,EAAMC,KAAKa,QAEZ,yBACIV,UAAU,cACVC,QAAS,kBAAML,EAAMM,KAAKN,EAAMC,OAChCM,cAAe,SAAAC,GACXA,EAAEC,iBACFT,EAAMU,KAAKV,EAAMC,QAEzB,0BAAMW,KAAK,MAAMC,aAAW,QAA5B,mCAMCb,EAAMC,KAAKU,SAAWX,EAAMe,MAEzB,yBACIX,UAAU,cACVC,QAAS,kBAAML,EAAMM,KAAKN,EAAMC,OAChCM,cAAe,SAAAC,GACXA,EAAEC,mBAEV,0BAAMG,KAAK,MAAMC,aAAW,QAA5B,iBAKA,yBACIT,UAAU,cACVC,QAAS,kBAAML,EAAMM,KAAKN,EAAMC,OAChCM,cAAe,SAAAC,GACXA,EAAEC,iBACFT,EAAMU,KAAKV,EAAMC,WCxD9Be,EAbH,SAAAhB,GACR,IAAIiB,EAAQjB,EAAMiB,MAAMC,KAAI,SAACjB,EAAMkB,GAC/B,OACI,kBAAC,EAAD,CAAMlB,KAAMA,EAAMmB,IAAKD,EAAOb,KAAMN,EAAMM,KAAMI,KAAMV,EAAMU,KAAMK,MAAOf,EAAMe,OAA/E,QAGR,OACI,yBAAKX,UAAU,OACVa,ICqJEI,E,kDA5JX,WAAYrB,GAAO,IAAD,8BACd,cAAMA,IAgCVsB,WAAa,SAAAtB,GAIT,IAFA,IAAIuB,EAAQ,GAEHC,EAAI,EAAGA,EAAIxB,EAAMyB,IAAKD,IAAI,CAC/BD,EAAMG,KAAK,IACX,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,EAAM4B,IAAKD,IAC3BJ,EAAMC,GAAGE,KAAK,CACVG,EAAGL,EACHM,EAAGH,EACHxB,UAAW,EACXD,QAAQ,EACRS,SAAS,EACTG,SAAS,IAOrB,OAAOS,GArDO,EAwDlBjB,KAAO,SAAAyB,GACH,GAA0B,UAAtB,EAAK/B,MAAMgC,OAAf,CAGA,IAAIC,EAAO,EAAKC,MAAMD,KAClBE,EAAUF,EAAKF,EAAKF,GAAGE,EAAKD,GAChC,GAAI,EAAKM,QAAQ,CACb,EAAKA,SAAU,EACf,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKrC,MAAMsC,KAAMD,IAAI,CACrC,IAAIE,EAAKC,KAAKC,MAAMD,KAAKE,SAAW,EAAK1C,MAAMyB,KAC3CkB,EAAKH,KAAKC,MAAMD,KAAKE,SAAW,EAAK1C,MAAM4B,KAC3CK,EAAKM,GAAII,GAAIhC,SAAY4B,IAAOR,EAAKF,GAAKc,IAAOZ,EAAKD,EACtDO,IAIAJ,EAAKM,GAAII,GAAIhC,SAAU,EAI/B,EAAKX,MAAM4C,YACXT,EAAQjC,QAAS,EACjBiC,EAAQhC,UAAY,EAAK0C,WAAWd,GACpC,EAAKe,SAAS,CAACb,KAAMA,IAChBE,EAAQxB,SAAgC,IAArBwB,EAAQhC,WAC7B,EAAK4C,YAAYhB,QAGfA,EAAKjB,SAAYqB,EAAQjC,SAC1B,EAAKF,MAAM4C,YACXT,EAAQjC,QAAS,EACjBiC,EAAQhC,UAAY,EAAK0C,WAAWd,GACpC,EAAKe,SAAS,CAACb,KAAMA,IAChBE,EAAQxB,SAAgC,IAArBwB,EAAQhC,WAC5B,EAAK4C,YAAYhB,IAIrBI,EAAQxB,SAAiC,IAAtB,EAAKX,MAAMgD,SAC9B,EAAKjC,OAAQ,EACb,EAAKf,MAAMiD,aAhGL,EAsGlBF,YAAc,SAAAhB,GAEV,IADA,IAAIE,EAAO,EAAKC,MAAMD,KACbT,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAIG,GAAK,EAAGA,GAAK,EAAGA,IAChBI,EAAKF,EAAIL,GAAK,GAAKO,EAAKD,EAAIH,GAAK,GAAOI,EAAKF,EAAIL,EAAI,EAAKU,MAAMD,KAAKiB,QAAUnB,EAAKD,EAAIH,EAAI,EAAKO,MAAMD,KAAK,GAAGiB,SAC3GjB,EAAKF,EAAKF,EAAIL,GAAGO,EAAKD,EAAIH,GAAGhB,SAAYsB,EAAKF,EAAKF,EAAIL,GAAGO,EAAKD,EAAIH,GAAGzB,QACvE,EAAKI,KAAK2B,EAAKF,EAAKF,EAAIL,GAAGO,EAAKD,EAAIH,MA5GtC,EAmHlBkB,WAAa,SAAAd,GAET,IADA,IAAIoB,EAAQ,EACH3B,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAIG,GAAK,EAAGA,GAAK,EAAGA,IAChBI,EAAKF,EAAIL,GAAK,GAAKO,EAAKD,EAAIH,GAAK,GAAOI,EAAKF,EAAIL,EAAI,EAAKU,MAAMD,KAAKiB,QAAUnB,EAAKD,EAAIH,EAAI,EAAKO,MAAMD,KAAK,GAAGiB,UAC5G,EAAKhB,MAAMD,KAAKF,EAAKF,EAAIL,GAAGO,EAAKD,EAAIH,GAAGhB,SAAmB,IAANa,GAAiB,IAANG,GAChEwB,KAKhB,OAAOA,GA9HO,EAiIlBzC,KAAO,SAAAqB,GACH,GAA0B,UAAtB,EAAK/B,MAAMgC,SAGVD,EAAK7B,OAAO,CACb,IAAI+B,EAAO,EAAKC,MAAMD,KACtBF,EAAKjB,SAAWiB,EAAKjB,QACrB,EAAKgC,SAAS,CAACb,KAAMA,IACrB,EAAKjC,MAAMoD,WAAWrB,EAAKjB,SAAW,EAAI,KAvI9C,EAAKsB,SAAU,EACf,EAAKrB,OAAQ,EACb,EAAKmB,MAAQ,CACTD,KAAM,EAAKX,WAAWtB,IALZ,E,sEASQqD,GAClBC,KAAKtD,MAAMuD,OAASF,EAASE,KACzBD,KAAKtD,MAAMgD,OAASK,EAASL,SAE7BM,KAAKR,SAAS,CACVb,KAAMqB,KAAKhC,WAAW+B,KAE1BC,KAAKlB,SAAU,EACfkB,KAAKvC,OAAQ,GAKbuC,KAAKtD,MAAMgD,QAAUK,EAASL,SAElCM,KAAKR,SAAS,CACVb,KAAMqB,KAAKhC,WAAW+B,KAE1BC,KAAKlB,SAAU,EACfkB,KAAKvC,OAAQ,K,+BAiHZ,IAAD,OACAkB,EAAOqB,KAAKpB,MAAMD,KAAKf,KAAI,SAACO,EAAKN,GACjC,OAAQ,kBAAC,EAAD,CACIF,MAAOQ,EACPL,IAAKD,EACLT,KAAQ,EAAKA,KACbJ,KAAM,EAAKA,KACXS,MAAO,EAAKA,WAI5B,OAAO,yBAAKX,UAAU,SAAS6B,O,GAzJnBuB,IAAMC,W,gBCuCXC,EAvCA,SAAA1D,GAEX,MAAqB,YAAjBA,EAAMgC,OAGF,yBAAK5B,UAAU,UACX,4BAAQA,UAAU,OAAOC,QAASL,EAAM2D,MAAxC,QACA,4BAAQvD,UAAU,OAAOC,QAASL,EAAM4D,MAAxC,QACA,yBAAKxD,UAAU,cAAf,UAAoCJ,EAAM6D,WAC1C,yBAAKzD,UAAU,SAAf,uBAIc,YAAjBJ,EAAMgC,OAGP,yBAAK5B,UAAU,UACX,4BAAQA,UAAU,OAAOC,QAASL,EAAM2D,MAAxC,QACA,4BAAQvD,UAAU,OAAOC,QAASL,EAAM4D,MAAxC,QACA,yBAAKxD,UAAU,cAAf,UAAoCJ,EAAM6D,WAC1C,yBAAKzD,UAAU,SAAf,SAA6B,kBAAC,IAAD,CAAS0D,MAAO,EAAGC,IAAK,IAAMC,SAAU,OAArE,OAQJ,yBAAK5D,UAAU,UACX,4BAAQA,UAAU,OAAMC,QAASL,EAAM2D,MAAvC,QACA,4BAAQvD,UAAU,OAAOC,QAASL,EAAM4D,MAAxC,QACA,yBAAKxD,UAAU,cAAf,UAAoCJ,EAAM6D,WAC1C,yBAAKzD,UAAU,SAAf,kBCyDD6D,E,kDAtFb,aAAc,IAAD,8BACX,gBAsBFN,KAAO,WACL,EAAKb,SAASoB,OAAOC,OAAO,GAAI,EAAKC,YAxB1B,EA2BbR,KAAO,WACL,EAAKd,SAASoB,OAAOC,OAAO,GAAI,EAAKE,YA5B1B,EAqCbC,SAAW,WACL,EAAKpC,MAAMc,SAAY,EAAKd,MAAMT,IAAM,EAAKS,MAAMN,IAAM,EAAKM,MAAMI,OACtE,EAAKQ,SAAS,CACZd,OAAQ,OACPuC,MAAM,mCACT,EAAKzB,SAASoB,OAAOC,OAAO,GAAI,EAAKC,aA1C5B,EA+CbnB,QAAU,WACR,EAAKH,SAAS,CAACd,OAAQ,SAASuC,MAAM,gDAhD3B,EAoDbC,gBAAkB,WACU,IAAtB,EAAKtC,MAAMc,QAAsC,YAAtB,EAAKd,MAAMF,QACxC,EAAKc,SAAS,CAACd,OAAQ,YAEzB,EAAKc,UAAS,SAAA2B,GACZ,MAAO,CAACzB,OAAQyB,EAAKzB,OAAO,OAzDnB,EA6DbI,WAAa,SAACsB,GACZ,EAAK5B,SAAS,CAAEpC,KAAM,EAAKwB,MAAMxB,KAAOgE,KA5DxC,EAAKxC,MAAQ,CACXF,OAAQ,UACRuB,KAAM,OACN9B,IAAK,GACLG,IAAK,GACLlB,KAAM,EACN4B,KAAM,EACNU,OAAQ,GAEV,EAAKoB,SAAW,EAAKlC,MACrB,EAAKmC,SAAW,CACdrC,OAAQ,UACRuB,KAAM,OACN9B,IAAK,GACLG,IAAK,GACLlB,KAAM,GACN4B,KAAM,GACNU,OAAQ,GAnBC,E,+DA+BM2B,EAAWC,GACF,YAAtBtB,KAAKpB,MAAMF,QACbsB,KAAKgB,a,+BAiCP,OACE,yBAAKlE,UAAU,OACb,wBAAIA,UAAU,SAAd,gBACA,kBAAC,EAAD,CAAQyD,UAAaP,KAAKpB,MAAMxB,KAAMsB,OAAQsB,KAAKpB,MAAMF,OAAQ2B,KAAML,KAAKK,KAAMC,KAAMN,KAAKM,OAC7F,kBAAC,EAAD,CACEnC,IAAK6B,KAAKpB,MAAMT,IAChBG,IAAK0B,KAAKpB,MAAMN,IAChBU,KAAMgB,KAAKpB,MAAMI,KACjBU,OAAQM,KAAKpB,MAAMc,OACnBC,QAAWK,KAAKL,QAChBjB,OAAUsB,KAAKpB,MAAMF,OACrBoB,WAAcE,KAAKF,WACnBG,KAAQD,KAAKpB,MAAMqB,KACnBX,UAAWU,KAAKkB,uB,GAhFRhB,IAAMC,WCAxBoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f42f2a97.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = props => {\n    let renderCell = () => {\n        if (props.data.isOpen){\n            if (props.data.mineCount === 0){\n                return(\n                    <div \n                        className=\"cell-open\" \n                        onClick={() => props.open(props.data)} \n                        onContextMenu={e => {\n                            e.preventDefault();\n                            props.flag(props.data);    \n                        }}>\n                    </div>\n                );  \n            } else if (props.data.hasMine){\n                return(\n                    <div className=\"cell-open\" onClick={() => props.open(props.data)} \n                        onContextMenu={e => {\n                            e.preventDefault();    \n                        }}>\n                    <span role=\"img\" aria-label=\"bomb\">💣</span></div>\n                );   \n            } else{\n                return(\n                    <div \n                        className=\"cell-open\" \n                        onClick={() => props.open(props.data)} \n                        onContextMenu={e => {\n                            e.preventDefault();\n                            props.flag(props.data);    \n                        }}>\n                    {props.data.mineCount}</div>\n                );  \n            }\n            \n        } \n        \n        else if (props.data.hasFlag){\n            return(\n                <div \n                    className=\"cell-closed\" \n                    onClick={() => props.open(props.data)} \n                    onContextMenu={e => {\n                        e.preventDefault();\n                        props.flag(props.data);    \n                    }}>\n                <span role=\"img\" aria-label=\"flag\">🏴‍☠️</span></div>\n            );   \n        }\n        \n        else {\n            \n            if ((props.data.hasMine && props.ended)){\n                return(\n                    <div \n                        className=\"cell-closed\" \n                        onClick={() => props.open(props.data)} \n                        onContextMenu={e => {\n                            e.preventDefault(); \n                        }}>\n                    <span role=\"img\" aria-label=\"bomb\">💣</span></div>\n                );\n            }\n            else{\n                return(\n                    <div \n                        className=\"cell-closed\" \n                        onClick={() => props.open(props.data)} \n                        onContextMenu={e => {\n                            e.preventDefault();\n                            props.flag(props.data);    \n                        }}>\n                    </div>\n                );   \n\n            }  \n        }\n    }\n    return renderCell();\n};\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\n\nconst Row = props => {\n    let cells = props.cells.map((data, index) => {\n        return (\n            <Cell data={data} key={index} open={props.open} flag={props.flag} ended={props.ended}> </Cell>\n        )\n    })\n    return (\n        <div className=\"row\"> \n            {cells}\n        </div>\n    );\n};\n\nexport default Row;","import React from 'react';\nimport Row from './Row';\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n        this.initial = true;\n        this.ended = false;\n        this.state = {\n            rows: this.initialize(props)  \n        };\n    }\n\n    componentWillReceiveProps(newProps){\n        if (this.props.mode === newProps.mode){\n            if (this.props.opened > newProps.opened)\n            {\n                this.setState({\n                    rows: this.initialize(newProps)  \n                });\n                this.initial = true;\n                this.ended = false;\n            }\n        }\n        else {\n        \n            if (this.props.opened >= newProps.opened){\n            \n            this.setState({\n                rows: this.initialize(newProps)  \n            });\n            this.initial = true;\n            this.ended = false;\n           }\n    }\n    }\n    \n    initialize = props => {\n        \n        let board = [];\n        \n        for (let i = 0; i < props.row; i++){\n            board.push([]);\n            for (let j = 0; j < props.col; j++){\n                board[i].push({\n                    x: i,\n                    y: j,\n                    mineCount: 0,\n                    isOpen: false,\n                    hasMine: false,\n                    hasFlag: false\n                });\n            }\n        }\n        //for testing board\n        //console.table(board);\n        \n        return board;\n    };\n\n    open = cell => {\n        if (this.props.status === \"ended\"){\n            return;\n        }\n        let rows = this.state.rows;\n        let current = rows[cell.x][cell.y];\n        if (this.initial){\n            this.initial = false;\n            for (let m = 0; m < this.props.mine; m++){\n                let rx = Math.floor(Math.random() * this.props.row);\n                let ry = Math.floor(Math.random() * this.props.col);\n                if (rows[rx][ry].hasMine || (rx === cell.x && ry === cell.y) ){\n                    m--;\n                } else {\n                    //mine locations\n                    //console.log(`${rx},${ry}`);\n                    rows[rx][ry].hasMine = true;\n                }\n            }\n            \n            this.props.cellClick();\n            current.isOpen = true;\n            current.mineCount = this.countMines(cell);\n            this.setState({rows: rows});\n            if (!current.hasMine && current.mineCount ===0){\n               this.checkAround(cell);\n            }\n        } else {\n            if (!cell.hasFlag && !current.isOpen) {\n                this.props.cellClick();\n                current.isOpen = true;\n                current.mineCount = this.countMines(cell);\n                this.setState({rows: rows});\n                if (!current.hasMine && current.mineCount ===0){\n                    this.checkAround(cell);\n                }\n            }\n\n            if (current.hasMine && this.props.opened !== 0){\n                this.ended = true;\n                this.props.endGame();\n            }\n        }\n        //console.log(this.state.rows);\n    };\n\n    checkAround = cell => {\n        let rows = this.state.rows;\n        for (let i = -1; i <= 1; i++){\n            for (let j = -1; j <= 1; j++){\n                if ((cell.x + i >= 0 && cell.y + j >= 0) && (cell.x + i < this.state.rows.length && cell.y + j < this.state.rows[0].length)) {              \n                    if (!rows[cell.x + i][cell.y + j].hasMine && !rows[cell.x + i][cell.y + j].isOpen){\n                        this.open(rows[cell.x + i][cell.y + j]);\n                    }\n                }\n            }\n        }\n    }\n\n    countMines = cell => {\n        let count = 0;\n        for (let i = -1; i <= 1; i++){\n            for (let j = -1; j <= 1; j++){\n                if ((cell.x + i >= 0 && cell.y + j >= 0) && (cell.x + i < this.state.rows.length && cell.y + j < this.state.rows[0].length)) {              \n                    if (this.state.rows[cell.x + i][cell.y + j].hasMine && !(i === 0 && j === 0 )){\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    };\n\n    flag = cell => {\n        if (this.props.status === \"ended\"){\n            return;\n        }\n        if (!cell.isOpen){\n            let rows = this.state.rows;\n            cell.hasFlag = !cell.hasFlag;\n            this.setState({rows: rows});\n            this.props.updateFlag(cell.hasFlag ? -1 : 1);\n        }\n    }\n    \n    render(){\n        let rows = this.state.rows.map((row, index) => {\n            return (<Row \n                        cells={row} \n                        key={index}\n                        flag = {this.flag}\n                        open={this.open}\n                        ended={this.ended}\n                />);\n    \n        })\n        return <div className=\"board\">{rows}</div>;\n    };\n}\n\nexport default Board;","import React from 'react';\nimport CountUp from 'react-countup';\n\nconst Navbar = props => {\n    \n    if (props.status === \"waiting\"){\n        return (\n        \n            <div className=\"navbar\">\n                <button className=\"easy\" onClick={props.easy}>easy</button>\n                <button className=\"hard\" onClick={props.hard}>hard</button>\n                <div className=\"flag-count\">Flags: {props.flagCount}</div>\n                <div className=\"timer\"> Ready to start?  </div> \n            </div>\n        );\n    } \n    else if (props.status === \"running\"){\n        return (\n        \n            <div className=\"navbar\">\n                <button className=\"easy\" onClick={props.easy}>easy</button>\n                <button className=\"hard\" onClick={props.hard}>hard</button>\n                <div className=\"flag-count\">Flags: {props.flagCount}</div>\n                <div className=\"timer\">Time: <CountUp start={0} end={1000} duration={4500}/>  </div> \n            </div>\n        );\n    }\n    \n    else {\n        return (\n        \n            <div className=\"navbar\">\n                <button className=\"easy\"onClick={props.easy} >easy</button>\n                <button className=\"hard\" onClick={props.hard}>hard</button>\n                <div className=\"flag-count\">Flags: {props.flagCount}</div>\n                <div className=\"timer\">GAME OVER!  </div> \n            </div>\n        );\n    }\n\n};\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Board from \"./components/Board\";\nimport Navbar from './components/Navbar';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      status: \"waiting\",\n      mode: \"easy\",\n      row: 10,\n      col: 10,\n      flag: 5,\n      mine: 5,\n      opened: 0\n    };\n    this.easyMode = this.state;\n    this.hardMode = {\n      status: \"waiting\",\n      mode: \"hard\",\n      row: 20,\n      col: 20,\n      flag: 40,\n      mine: 40,\n      opened: 0\n    };\n  }\n\n  easy = () => {\n    this.setState(Object.assign({}, this.easyMode));\n  }\n\n  hard = () => {\n    this.setState(Object.assign({}, this.hardMode));\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (this.state.status === \"running\"){\n      this.checkWin();\n    }\n  }\n\n  checkWin = () => {\n    if (this.state.opened === (this.state.row * this.state.col - this.state.mine)) {\n      this.setState({\n        status: \"won\"\n      }, alert(\"You won the game!!! good job!!\"));\n      this.setState(Object.assign({}, this.easyMode));\n    }\n  }\n\n\n  endGame = () => {\n    this.setState({status: \"ended\"},alert(\"You stepped on a mine :( please try again!\"));\n  }\n\n\n  handleCellClick = () => {\n    if (this.state.opened === 0 && this.state.status !== \"running\"){\n      this.setState({status: \"running\"});\n    }\n    this.setState(prev => {\n      return {opened: prev.opened+1};\n    })\n  }\n\n  updateFlag = (newFlag) => {\n    this.setState({ flag: this.state.flag + newFlag});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">mInE sWeEpEr</h1>\n        <Navbar flagCount = {this.state.flag} status={this.state.status} easy={this.easy} hard={this.hard}/>\n        <Board \n          row={this.state.row} \n          col={this.state.col} \n          mine={this.state.mine} \n          opened={this.state.opened}\n          endGame = {this.endGame}\n          status = {this.state.status}\n          updateFlag = {this.updateFlag}\n          mode = {this.state.mode}\n          cellClick={this.handleCellClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}